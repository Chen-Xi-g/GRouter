if (singleModule){ // 如果是true 那么就独立运行
    apply plugin: 'com.android.application'
}else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def app_android = this.getRootProject().ext.app_android

android {
    compileSdkVersion app_android.compileSdkVersion

    defaultConfig {
        //独立运行需要ApplicationId
        if (singleModule){
            applicationId app_id.order
        }
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        // 这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值（必须是String）
        // 为什么需要定义这个？因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        // 切记：不能在android根节点，只能在defaultConfig或buildTypes节点下
        buildConfigField("boolean", "singleModule", String.valueOf(singleModule))

        // defaultConfig
//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [GRouteValue: 'hello ni hao javapoet']
//            }
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // 配置资源路径，方便测试环境，打包不集成到正式环境
    sourceSets { // 节省apt大小
        main {
            if (singleModule) {
                // 如果是组件化模式，需要单独运行时
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                // 集成化模式，整个项目打包apk
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    // release 时 debug 目录下文件不需要合并到主工程
                    exclude '**/debug/**'
                }
            }
        }
    }
}

kapt{
    arguments{
        arg("moduleName", project.name)
        arg("packageNameForAPT", this.getRootProject().ext.packageNameForAPT)
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    //循环遍历加载依赖
    this.getRootProject().ext.app_impl.each{
        k,v -> implementation v
    }
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    //引入注解lib
    implementation project(':grouter_annotation')
    kapt project(':grouter_compiler')
    implementation project(':grouter_api')

//    implementation project(':common')

}